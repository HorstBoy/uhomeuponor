Aquí están mis reglas completas para uponor:

import java.util.HashMap

//Create a map that map from uponor id to the item that should be updated:
val HashMap<String, GenericItem> itemMap = newHashMap(
    '84'  -> BadrumSetWithApp,
    '91'  -> BadrumNereSetPoint,
    '105' -> BadrumNereTemp,

    '124' -> PannrumSetWithApp,
    '131' -> PannrumSetPoint,
    '145' -> PannrumTemp,

    '164' -> SminkrumSetWithApp,
    '171' -> SminkrumSetPoint,
    '185' -> SminkrumTemp,

    '204' -> TVrumSetWithApp,
    '211' -> TVrumSetPoint,
    '225' -> TVrumTemp,

    '244' -> TrapprumSetWithApp,
    '251' -> TrapprumSetPoint,
    '265' -> TrapprumTemp,

    '284' -> GarderobSetWithApp,
    '291' -> GarderobSetPoint,
    '305' -> GarderobTemp
)

val HashMap<String, GenericItem> alarmItemMap  = newHashMap(
    '28' -> TempAlarm
)

rule "Read Uponor values"
when
    Time cron "0 0/1 * * * ?"
then
    val url = "http://192.168.0.117/api";
    val contenttype = "application/json";

    var POSTrequest = '{"jsonrpc":"2.0", "id":8, "method":"read", "params":{ "objects":[%s]}}'
    val itemQuery = '{"id":"%s","properties":{"85":{}}}'
    val itemQueryList = newArrayList()
    val idSet = itemMap.keySet
    idSet.forEach[ key | itemQueryList.add(String.format(itemQuery, key)) ]
    POSTrequest = String.format(POSTrequest, itemQueryList.join(','))
    var json = null;
    var count = 0;
    try {
        json = sendHttpPostRequest(url, contenttype, POSTrequest);
        count = Integer::parseInt(transform("JSONPATH", "$.result.objects.length()", json));
    }
    catch(Throwable e) {
        logWarn("Upponor", "An error occured whuile reading the values from the Uponor gateway. " + e.getMessage())
        return;
    }

    for(var i = 0; i < count; i++) {
        //logWarn("Banan:", transform("JSONPATH", "$.result.objects[" + i + "]", json)  );

        val id = transform("JSONPATH", "$.result.objects[" +i+ "].id", json)
        val value = transform("JSONPATH", "$.result.objects[" +i+ "].properties.85.value", json)
        val item = itemMap.get(id);
        if(item instanceof Number) {
            item.postUpdate(Float::parseFloat(value))
        }
        else if(item instanceof SwitchItem) {
            if (value == '0') {item.postUpdate(OFF)}
            else {
                item.postUpdate(ON)}
        }
        else {
            item.postUpdate(value)
        }
    }
end

rule "Read Uponor alarms"
when
    Time cron "0 0/1 * * * ?"
then
    val url = "http://192.168.0.117/api";
    val contenttype = "application/json";

    var POSTrequest = '{"jsonrpc":"2.0", "id":8, "method":"read", "params":{ "objects":[%s]}}'
    val itemQuery = '{"id":"%s","properties":{"77":{}, "662":{}}}'
    val itemQueryList = newArrayList()
    val idSet = alarmItemMap.keySet
    idSet.forEach[ key | itemQueryList.add(String.format(itemQuery, key)) ]
    POSTrequest = String.format(POSTrequest, itemQueryList.join(','))

    val json = sendHttpPostRequest(url, contenttype, POSTrequest);
    val count = Integer::parseInt(transform("JSONPATH", "$.result.objects.length()", json));

    for(var i = 0; i < count; i++) {

        val id = transform("JSONPATH", "$.result.objects[" +i+ "].id", json)
        val state = transform("JSONPATH", "$.result.objects[" +i+ "].properties.662.value", json)
        val item = alarmItemMap.get(id);
        if (state.equals("0")){
            item.postUpdate('OK')
        }
        else {
            item.postUpdate('Triggered')
        }
    }
end

rule "Enable Uponor set temperature"
when
    Member of setWithApp received command
then
    val url = "http://192.168.0.117/api";
    val contenttype = "application/json";
    var POSTrequest = '{"jsonrpc":"2.0", "id":9, "method":"write", "params":{ "objects":[%s]}}'
    val itemQuery = '{"id":"%s","properties":{"85":{"value":%s:}}}'

    for(e:itemMap.entrySet) {
	if(e.value.equals(triggeringItem)) {
            var state = 1;
            if(triggeringItem.state == OFF) {
                state = 0;
            }
            POSTrequest = String.format(POSTrequest, String.format(itemQuery, e.key, state));
            val json = sendHttpPostRequest(url, contenttype, POSTrequest);
        }
    }

end

rule "Set Uponor target temperature"
when
    Member of tempSetting received command
then
    val url = "http://192.168.0.117/api";
    val contenttype = "application/json";
    var POSTrequest = '{"jsonrpc":"2.0", "id":9, "method":"write", "params":{ "objects":[%s]}}'
    val itemQuery = '{"id":"%s","properties":{"85":{"value":%s:}}}'

    for(e:itemMap.entrySet) {
	if(e.value.equals(triggeringItem)) {
            POSTrequest = String.format(POSTrequest, String.format(itemQuery, e.key, triggeringItem.state));
            val json = sendHttpPostRequest(url, contenttype, POSTrequest);
        }
    }

end


I have gotten the id mappings from the javascript file but I don’t know what all of then does yet:

System Value mappings:

20 = "module_id"
21 = "cooling_available"
22 = "holiday_mode" 
23 = "forced_eco_mode" //Home/Away
24 = "hc_mode"
25 = "hc_masterslave"
26 = "ts_sv_version"
27 = "holiday_setpoint"  //Note that the setpoint for the rooms doesn’t change when holiday mode is enabled.
28 = "average_temp_low"		//No value?
29 = "low_temp_alarm_limit"
30 = "low_temp_alarm_hysteresis"
31 = "remote_access_alarm"	//No value?
32 = "device_lost_alarm"		//No value?
33 = "no_comm_controller1"
34 = "no_comm_controller2"
35 = "no_comm_controller3"
36 = "no_comm_controller4"
37 = "average_room_temperature"
38 = "controller_presence"
39 = "allow_hc_mode_change"
40 = "hc_master_type"


Module Value mappings:
(x = module number) 0 for me… What is module? The X165?

x*500 + 60 = "output_module"
x*500 + 61 = "rh_deadzone"
x*500 + 62 = "controller_sv_version"
x*500 + 63 = "thermostat_presence"
x*500 + 64 = "supply_high_alarm" 
x*500 + 65 = "supply_low_alarm"
x*500 + 66 = "average_room_temperature_NO" 
x*500 + 67 = "measured_outdoor_temperature"
x*500 + 68 = "supply_temp"
x*500 + 69 = "dehumidifier_status"
x*500 + 70 = "outdoor_sensor_presence"

Zone property mappings:
x = module number
y = room number (0-5 for me)

x*500 + y*40 + 80 = "eco_profile_active_cf" //Read only? Seem to be set by home/Away.
x*500 + y*40 + 81 = "dehumidifier_control_activation"
x*500 + y*40 + 82 = "rh_control_activation"
x*500 + y*40 + 83 = "eco_profile_number"
x*500 + y*40 + 84 = "setpoint_write_enable" //Use room thermostat (0) or app (1)
x*500 + y*40 + 85 = "cooling_allowed"
x*500 + y*40 + 86 = "rh_setpoint"
x*500 + y*40 + 87 = "min_setpoint" //Min value on thermostat
x*500 + y*40 + 88 = "max_setpoint" //Max value on thermostat
x*500 + y*40 + 89 = "min_floor_temp"
x*500 + y*40 + 90 = "max_floor_temp"
x*500 + y*40 + 91 = "room_setpoint" //Desired temperature in room
x*500 + y*40 + 92 = "eco_offset"  // 
x*500 + y*40 + 93 = "eco_profile_active" //Read only? Seem to be set by home/Away.
x*500 + y*40 + 94 = "home_away_mode_status" //Read only? I can’t get this to change at all…
x*500 + y*40 + 95 = "room_in_demand"
x*500 + y*40 + 96 = "rh_limit_reached"
x*500 + y*40 + 97 = "floor_limit_status"
x*500 + y*40 + 98 = "technical_alarm"
x*500 + y*40 + 99 = "tamper_indication"
x*500 + y*40 + 100 = "rf_alarm"
x*500 + y*40 + 101 = "battery_alarm" 
x*500 + y*40 + 102 = "rh_sensor"
x*500 + y*40 + 103 = "thermostat_type"
x*500 + y*40 + 104 = "regulation_mode"
x*500 + y*40 + 105 = "room_temperature" //Actual temperature
x*500 + y*40 + 106 = "room_temperature_ext"
x*500 + y*40 + 107 = "rh_value"
x*500 + y*40 + 108 = "ch_linked_to_th"
x*500 + y*40 + 109 = "room_name" // This could be usefull…
x*500 + y*40 + 110 = "utilization_factor_24h"
x*500 + y*40 + 111 = "utilization_factor_7d"
x*500 + y*40 + 112 = "reg_mode"
x*500 + y*40 + 113 = "channel_average"
x*500 + y*40 + 114 = "radiator_heating"
